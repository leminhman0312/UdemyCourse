#include <stdio.h>
#include <stdlib.h>

struct Array
{
  /* int *A; 			/\* int pointer *\/ */
  int A[10];
  int size;
  int length;
};

void Display(struct Array arr){
  int i;
  printf("\nElements are:\n");

  for (i = 0; i < arr.length ; i++) {
    printf("%d\n", arr.A[i]);
  }
}

void Append(struct Array *arr, int x){
  if (arr->length < arr->size) {
    arr->A[arr->length++] = x;
  }
}


void Insert(struct Array *arr, int index, int x){
  int i;
  if (index >= 0 && index <=arr->length) {
    for (i = arr->length; i > index  ; i--) {
      arr->A[i] = arr->A[i-1];
    }
    arr->A[index] = x;
    arr->length++;
  }
}



int Delete(struct Array *arr, int index){
  int x = 0;
  int i;
  if (index >= 0 && index <= arr->length-1) {
    x = arr->A[index];
    for (i = index; i < arr->length-.1 ; i++) {
      arr->A[i] = arr->A[i+1];
    }
    arr->length--;
    return x;
  }
  return 0;
}

void swap(int *x, int *y){
  int temp;
  temp = *x;
  *x = *y;
  *y = temp;
}


int LinearSearch(struct Array arr, int key){
  int i;
  for (i = 0; i < arr.length ; i++) {
    if (key == arr.A[i]) {
      return i;
    }
  }
  return -1;
}

int ImpLinearSearch(struct Array *arr, int key){
  int i;
  for (i = 0; i < arr->length ; i++) {
    if (key == arr->A[i]) {
      swap(&arr->A[i], &arr->A[0]);
      return i;
    }
  }
  return -1;
}


int BinarySearch(struct Array arr, int key){
  int l, mid, h;
  l = 0;
  h = arr.length-1;
  while (l <= h) {
    mid = (l+h)/2;
    if (key == arr.A[mid]) {
      return mid;
    }
    else if (key < arr.A[mid]) {
      h = mid - 1;
    }
    else {
      l = mid + 1;
    }
  }
  
  return -1;
}


int BinarySearchRecursive(int a[], int l, int h, int key){
  int mid;
  if (l <= h) {
    mid = (l + h)/2;
    if (key == a[mid]) {
      return mid;
    }
    else if (key < a[mid]) {
      return BinarySearchRecursive(a, l, mid-1, key);
    }
    else {
      return BinarySearchRecursive(a, mid+1, h, key);
    }
  }
    return -1;
}


int Get(struct Array arr, int index){
  if (index >= 0 && index < arr.length){
    return arr.A[index];
  }
  return -1;
}


void Set(struct Array *arr, int index, int x){
  if (index >= 0 && index < arr->length){
    arr->A[index] = x;
  }
}

int Max(struct Array arr){
  int max=arr.A[0];
  for (int i = 1; i < arr.length ; i++) {
    if (arr.A[i] > max) {
      max = arr.A[i];
    }
  }
  return max;
}


int Min(struct Array arr){
  int min=arr.A[0];
  for (int i = 1; i < arr.length ; i++) {
    if (arr.A[i] < min) {
      min = arr.A[i];
    }
  }
  return min;
}


int Sum(struct Array arr){
  int s = 0;
  for (int i = 0; i < arr.length ; i++) {
    s = s + arr.A[i];
  }
  return s;
}

float Avg(struct Array arr){
  return (float)Sum(arr)/arr.length;
}


void Reverse(struct Array *arr){
  int *B;
  int i, j;

  B = (int*)malloc(sizeof(int) * arr->length);

  /* Put reverse  */
  for (i = arr->length-1, j = 0; i >= 0  ; i--, j++) {
    B[j] = arr->A[i];
  }
  /* Put B to A */
  for (i = 0; i < arr->length ; i++) {
    arr->A[i] = B[i];
  }
}

void Reverse2(struct Array *arr){
  int i, j;
  for (i = 0,j = arr->length-1 ; i < j ; i++,j--) {
    swap(&arr->A[i], &arr->A[j]);
  }
}


void LeftShift(struct Array *arr){
  int i;
  for (i = 0; i < arr->length-1 ; i++) {
    arr->A[i] = arr->A[i+1];
  }
  arr->A[arr->length-1] = 0;

}

void LeftRotate(struct Array *arr){
  int i;
  int temp = arr->A[0];
  for (i = 0; i < arr->length-1 ; i++) {
    arr->A[i] = arr->A[i+1];
  }
  arr->A[arr->length-1] = temp;
}

void RightShift(struct Array *arr){
  int i;
  for (i = arr->length-1; i >= 1 ; i--) {
    arr->A[i] = arr->A[i-1];
  }
  arr->A[0] = 0;
}


void RightRotate(struct Array *arr){
  int i;
  int temp = arr->A[arr->length-1];
  for (i = arr->length-1; i >= 1 ; i--) {
    arr->A[i] = arr->A[i-1];
  }
  arr->A[0] = temp;
}

void InsertSorted(struct Array *arr, int x){

  int i = arr->length-1;
  if (arr->length == arr->size) {
    return;
  }
  while (i >= 0 && arr->A[i] > x) {
    arr->A[i+1] = arr->A[i];
    i--;
  }
  arr->A[i+1] = x;
  arr->length++;
}


int isSorted(struct Array arr){
  int i;
  for (i = 0; i < arr.length-1 ; i++) {
    if (arr.A[i] > arr.A[i+1]) {
      return 0;			/* false */
    }
  }
  return 1;			/* true */
}


void Rearrange(struct Array *arr){
  int i, j;
  i = 0;
  j = arr->length-1;

  while (i < j) {
    while (arr->A[i] < 0) {
      i++;
    }

    while (arr->A[j] >= 0) {
      j--;
    }

    if (i < j) {
      swap(&arr->A[i], &arr->A[j]);
    }
  }
}


struct Array* Merge(struct Array *arr1, struct Array *arr2){
  int i, j, k;
  i = j = k = 0;
  struct Array *arr3=(struct Array *)malloc(sizeof(struct Array));

  while (i < arr1->length && j < arr2->length) {
    if (arr1->A[i] < arr2->A[j]) {
      arr3->A[k] = arr1->A[i];	/* put in new array */
      i++;			
      k++;
    }
    else {
      arr3->A[k] = arr2->A[j];	/* put in new array */
      j++;
      k++;
    }
  }

  while (i < arr1->length) {
    arr3->A[k] = arr1->A[i];
    i++;
    k++;
  }

  while (j < arr2->length) {
    arr3->A[k] = arr2->A[j];
    j++;
    k++;
  }
  
  arr3->length = arr1->length + arr2->length;
  arr3->size = 8;

  return arr3;
}




struct Array* Union(struct Array *arr1, struct Array *arr2){
  int i, j, k;
  i = j = k = 0;
  struct Array *arr3=(struct Array *)malloc(sizeof(struct Array));

  while (i < arr1->length && j < arr2->length) {
    if (arr1->A[i] < arr2->A[j]) {
      arr3->A[k] = arr1->A[i];	/* put in new array */
      i++;			
      k++;
    }
    else if(arr2->A[j] < arr1->A[i]){
      arr3->A[k] = arr2->A[j];	/* put in new array */
      j++;
      k++;
    }
    else {
      arr3->A[k] = arr1->A[i];
      k++;
      i++;
      j++;
    }
  }

  while (i < arr1->length) {
    arr3->A[k] = arr1->A[i];
    i++;
    k++;
  }

  while (j < arr2->length) {
    arr3->A[k] = arr2->A[j];
    j++;
    k++;
  }
  
  arr3->length = k;
  arr3->size = 10;

  return arr3;
}


struct Array* Intersection(struct Array *arr1, struct Array *arr2){
  int i, j, k;
  i = j = k = 0;
  struct Array *arr3=(struct Array *)malloc(sizeof(struct Array));

  while (i < arr1->length && j < arr2->length) {
    if (arr1->A[i] < arr2->A[j]) {
      i++;			
    }
    else if(arr2->A[j] < arr1->A[i]){
      j++;
    }
    else if(arr1->A[i] == arr2->A[j]){
      arr3->A[k] = arr1->A[i];
      k++;
      i++;
      j++;
    }
  }


  arr3->length = k;
  arr3->size = 10;

  return arr3;
}



struct Array* Difference(struct Array *arr1, struct Array *arr2){
  int i, j, k;
  i = j = k = 0;
  struct Array *arr3=(struct Array *)malloc(sizeof(struct Array));

  while (i < arr1->length && j < arr2->length) {
    if (arr1->A[i] < arr2->A[j]) {
      arr3->A[k] = arr1->A[i];	/* put in new array */
      i++;			
      k++;
    }
    else if(arr2->A[j] < arr1->A[i]){
      j++;
    }
    else {
      i++;
      j++;
    }
  }

  while (i < arr1->length) {
    arr3->A[k] = arr1->A[i];
    i++;
    k++;
  }
  
  arr3->length = k;
  arr3->size = 10;

  return arr3;
}


int main(){

  struct Array arr1;
  

  
  return 0;
}
