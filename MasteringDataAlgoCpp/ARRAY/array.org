* Intro to array
** array on integer
** Declaring arrays
*** int A[5];   where we get garbage values
*** int A[5] = {2,4,6,8,10}; all values initialized
*** int A[5] = {2.4}; only first 2 are initialized, rest is 0
*** int A[5] = {0}; all zero
*** int A[] = {2,4,6,8,10}; automatically create A[5]
** Traverse using for loop
** To print an element at position 2
*** A[2];
*** 2[A];
*** *(A+2);
* Static vs Dynamic array 
** Static 
*** size cannot be modified.  Memories created on STACK
*** C: size decided at compilation time 
*** C++: size at run time. Eg. cin >> n; int A[n];
** Dynamic
*** on HEAP
**** Create pointer int *p on STACK
**** C++: p = new int[5]; create 5 integer array on HEAP
**** C: p = (int*)malloc(sizeof(int)*5);
*** Note: remember to free memory
**** C++: delete []p; if p is used for an array we use []
**** C: free(p)
*** Access on heap;
**** p[0] = 5;
* Demo static dynamic array
  #+begin_src C 
    #include <stdio.h>
    #include <stdlib.h>

    int main(){
      int A[5] = {2,4,6,8,10};
      int *p;
      int i;

      p=(int*)malloc(sizeof(int) * 5);
      p[0] = 3;
      p[1] = 5;
      p[2] = 7;
      p[3] = 9;
      p[4] = 11;

      for (int i = 0; i < 5 ; i++) {
	printf("%d\t%d\n", A[i], p[i]);
      }


      return 0;
    }

  #+end_src

  #+RESULTS:
  |  2 |  3 |
  |  4 |  5 |
  |  6 |  7 |
  |  8 |  9 |
  | 10 | 11 |
* Increase array size
** int *p = new int[5]
** Take another pointer: int *q = new int[10] => Create larger array separately
** Copy p[i] onto q[i]
** delete/free memory in p 
** tells p to to point to q => both p and q points to the same larger array
** free q 
** demo
   #+begin_src C 
     #include <stdio.h>
     #include <stdlib.h>

     int main(){
       int *p, *q;

       p = (int*)malloc(sizeof(int) * 5);
       p[0] = 3;
       p[1] = 5;
       p[2] = 7;
       p[3] = 9;
       p[4] = 11;


       /* for (int i = 0; i < 5 ; i++) { */
       /* 	 printf("%d\n", p[i]); */
       /* } */

       q = (int*)malloc(sizeof(int) * 10);

       for (int i = 0; i < 5 ; i++) {
	 q[i] = p[i];
       }

       free(p);
       p = q;
       q = NULL;

       for (int i = 0; i < 5 ; i++) {
	 printf("%d\n", p[i]);
       }

       return 0;
     }

   #+end_src

   #+RESULTS:
   |  3 |
   |  5 |
   |  7 |
   |  9 |
   | 11 |
   |    |
* 2D array
** Method 1: int A[3][4] => 3 row, 4 col on STACK
*** Memory allocates like a 1D array of 12 memory blocks
** Method 2: int *A[3] => array of int pointers of size 3 on STACK, actual array on HEAP 
*** block 0 [ ] -> want array of size 4 here | | | | |
*** block 1 [ ] -> want array of size 4 here | | | | |
*** block 2 [ ] -> want array of size 4 here | | | | |
*** A[0] = new int[4] => create array of size 4 for block 0
*** A[1] = new int[4] and A[2] = new int[4]
** Method 3: int **A; everything on HEAP 
** A = new int*[3] create array of int pointers (like above) on HEAP  
** A[0] = new int[4] on HEAP
** A[1] = new int[4] on HEAP
** A[2] = new int[4] on HEAP
** Demo : [[file:2darray.c][2darray.c]]
* 1D Array in compilers
** int x = 10; compiler allocates address for x and store 10 at that address
** Compiler memory to address
** int A[5] = {.....};
** A[i] = Base index + index *  sizeof (data type)
** A[3] = L0 + 3 * 2
** If index starts at 1:  A[i] = Base index + (index-1)*sizeof(data type)
* 2D Array in compilers
** ROW MAJOR MAPPING
*** Elements store row by row in A[m x n]
*** A = a00 a01 a02 a03 | a10 a11 a12 a13 | a20 a21 a22 a23 |
*** Say we access A[1][2] and say a00 has address 200
**** A[1][2] = 200 + [4 + 2]*sizeof(int)
*** In general A[i][j] = *L0 + [i*n+j]*sizeof(data type)*
*** If index starts at 1:  A[i][j] = L0 + [(i-1)*n+(j-1)]*sizeof(data type)
** COL MAJOR MAPPING
*** Map colum by colum 
*** A = a00 a10 a20 | a01 a11 a21 | a02 a12 a21 | a03 a13 a23 |
*** Say we want A[1][2]
**** A[1][2] = 200 + [2 * 3 + 1]*sizeof(int)
*** In general, *A[i][j] = L0 + [j*m + i]*sizeof)(data type)*
* 4D Array
** Type A[d1][d2][d3][d4]
** Row major Add(A[i][i2][i3][i4]) = L0 + [i1*d2*d3*d4 + i2*d3*d4 + i3*d4 +i4]*sizeof(data)
** Col major Add(A[i1][i2][i3][i4]) = L0 + [i4*d1*d2*d3 + i3*d1*d2 + i2*d1 + i1]*sizeof(data)
* For nD array
** Row major mapping: L0 + SUM_p from 1 to n [  (i_p) * product_q = p + 1 to n of dq] * sizeof(datetype)  
*** O(n^2)
*** If rewrite by taking commons => O(n) --> *HOMER'S RULE*
* 3D Array
** int A[l][m][n]
** Row major Addr(A[i][j][k]) = L0 + [i*m*n + j*n + k] + sizeof(datatype) 
** Colum major Addr(A[i][j][k]) = L0 + [k*m*l + j*l + i] + sizeof(datatype) 

* Quiz

** 1. A[1....10][1...15] = A[m][n]

*** L0 = 100

*** Row major Addr(A[i][j]) = L0 + [(i-1)*n+(j-1)]*sizeof(data type)

*** 100 + [(i-1)*15+(j-1)]*1

*** 100 + (15i- 15 + j - 1)*1

*** 100 + 15i - 15 + j - 1 

*** 84 + 15 i + j

** 2. unsigned int x[4][3] = {......}. Printf("%u, %u, %u", x + 3, *(x+3), *(x+2)+3)

*** 1 2 3

*** *4* 5 6 

*** 7 8 9

*** 10 11 12

*** A = a00 a01 a02 | a03 a04 a05 | a06 a07 a08 | a09 a10 a11 | 

*** %u, x + 3 => 2000 + (3*int) = > *2012 address*

*** %u, *(x+3) => Gets value of address 2012  =  4

*** %u, *(x+2) + 3 => *6*
*** testing: `file:quizarray2.c`

** 4. ?X[?][?][?]

*** t0 = i*1024

*** t1 = j + 32





* Array ADT
** Perform various operations on an array
** Data
*** Array space: say 10
*** Size
**** static
***** int A[10]
**** dynamic
***** int * A
***** A = new int[size]
*** length
** Operations
*** Display 
**** printf ("%d", A[i]) in for loop
*** Add/Append
**** Add new element at *END* of the array
**** A[Length] = x; length++;
*** Insert
**** shifted forward to allow space
**** start from last, copy prev last and *STOP* until reach insertion point
**** pseudocode
      #+begin_src C
	for (i = length; i > index ; i--) {
	  A[i] = A[i-1];
	}

	A[index] = x;
	length++;

      #+end_src
*** Delete
**** delete(index)
**** x = A[index]
**** shift to occupy blank space
**** pseudocode
     #+begin_src C
       for (i = index; i < Length-1 ; i++) {
	 A[i] = A[i+1];
	}
       Length--;
     #+end_src
**** Min time: 2 constant, Max time: n+2
*** Linear search
**** assume unique 
**** Use a key to search, if match then successful, else not successful 
**** Pseudocode
     #+begin_src C 
       /* Using for loop */
       for (i = 0; i < length ; i++) {
	 if (key == A[i]) {
	   return i;
	 }
	 return -1;
	}
     #+end_src
**** Min: 1 time. Max: n time
**** Comparing case comparison at index 1, 2, 3....=> 1 + 2 + 3 + .... + n
**** On average, this is (1 + 2 + 3 + ... + n)/n = (n + 1)/2 = O(n)
*** Improve linear search
**** Transposition (move to element to the left so 1 less comparison next time)
**** Move to front
*** Binary search
**** Elements must be sorted
**** Check for element in middle
**** Need Low, High, Middle = (Low + High)/2
**** Low     Mid    High 
**** If Key < Mid => move left
***** Change High to Mid -1
***** Calculate new mid
**** Else move right
***** Change Low to Mid + 1
***** Calculate new mid
**** Stop when Low > High => Element does not exist
**** Pseudocode
     #+begin_src C
       binarySearch(l,h,key){
	 mid = abs(l + h)/2;
	 while (l <=h) {
	   if (key == A[mid]) {
	       return mid;
	   }
	   else if (key < A[mid]){	/* go left */
	       h = mid-1;

	   }
	   else {
	       h = mid + 1;		/* go right */
	   }
	 }
	 return -1;
       }


       binarySearchRecursive(l,h,key){
	 if (l <= h) {
	   mid = abs(l + h)/2;
	   if (key == A[mid]) {
	     return mid;
	   }
	   else if (key < A[mid]) {
	     return binarySearchRecursive(l,mid-1,key);
	   }
	   else {
	     return binarySearchRecursive(mid+1,h,key);
	   }
	 }
	 return -1;
       }
     #+end_src
**** Analysis
***** Tracing tree height logn
***** min O(1)
***** max O(logn)
***** Why logn? 
****** Say we have 15 elements (0-15) round to 16
****** 16/2 => 8 | 8 
****** 16/2/2/2 until we reach 1 number = 1 
****** 16/(2^4) = 1
****** 2^4 = 16
****** 4 = log_2(16)
****** or for n, log_2(n)
****** exactly is log_2(n+1)
**** Average case analysis
***** total time taken in all possible cases / number of cases
***** 1 + (1*2) + (2*4) + (3*8)
***** 1 + 1 * 2^1 + 2 * 2^2 + 3 * 2^3
***** sum of (i * 2^i) from i = 1 to logn
***** Average cases = sum of (i * 2^i) / n   = (logn*2^(logn))/n = logn
**** E = sum of external, I = internal then E = I + 2n
**** e = no of external node, i = no of internal node then e = i + 1 
**** Average sucessful search for n element = (I / n) + 1
***** = 1 + (E/n)-2
***** = 1 + (nlogn/n)-2
***** = logn
**** Average unsuccessful search for n element: E/(n+1) = logn
*** Get(index)
**** if index >= 0 and index < length
***** return A[index];
**** time taken: O(1)
*** Set(index,x)
**** replace value at particular index
**** if index >= 0 and index < length
***** A[index] = x;
**** time taken O(1)
*** Max(array)
**** max = A[0]
**** compare and rewrite "max" if A[i] > max
     #+begin_src C
       for (i = 1; i < length ; i++) {
	 if (A[i] > max ) {
	   max = A[i];
	 }
	}
       return max;
     #+end_src
**** time taken: O(n)
*** Min(array)
**** similar but reverse
**** time taken O(n)
*** sum(array)
**** total = 0
**** loop through and add to "total"
     #+begin_src C
       total = 0;
       for (i = 0; i < length ; i++) {
	 total = total + A[i];
	}
       return total;
     #+end_src
**** time taken O(n)
**** recursive 
     #+begin_src C
       int sum (A,n){
	 if (n < 0) {
	   return 0;
	 }
	 else {
	   return sum(A,n-1) + A[n];
	 }
       }
       call sum(A,length-1);
     #+end_src
*** Average(array)
**** same as sum but return total/n in sum
*** Reverse
**** take extra array B, copy in reverse from A
**** First method
***** 
      #+begin_src C
	for (i = length-1, j = 0; i>=0  ; i--,j++) {
	  B[j] = A[i];
	 }

	for (i = 0; i < length ; i++) {
	  A[i] = B[i];
	 }
      #+end_src
***** Time taken O(n)
**** Second method
***** Scan 2 ends and interchange 
***** i from begin, j from end
***** i++, j--, stop when i > j 
***** 
      #+begin_src C 
	for (i = 0, j = length-1; i < j ; i++,j--) {
	  temp = A[i];
	  A[i] = A[j];
	  A]j = temp;
	}
      #+end_src
***** Time taken: O(n)
*** Left shift/rotate
**** Left Shift: Lose first element
**** Rotation: Missing element goes to the back on left shift 
*** Insert in a sorted array
**** Insert *x*  such that new array is sorted
**** start shifting from i = length-1
**** 
     #+begin_src C 
       while (A[i]>x) {
	 A[i+1] = A[i];
	 i--;
	}
       A[i+1] = x;
     #+end_src
*** Checking if array is sorted
**** if every number < the next number => sorted
**** 
     #+begin_src C 
       isSorted(A,n){
	 for (i = 0; i < n-1 ; i++) {
	   /* check for false condition */
	   if (A[i] > A[i+1]) {
	     return false;
	   }
	 }
	 return true;
       }
     #+end_src
**** time taken: max O(n), min O(1)
*** Arrange -ve on left side
**** 2 pointers: i from beginning, j from last
**** i for +ve
**** j for -ve
**** if found, exchange
**** 
     #+begin_src C 
       i = 0;
       j = length-1;


       while (i < j){

	 while (A[i] < 0) {
	   i++;
	 }

	 while (A[j] >= 0) {
	   j--;
	 }

	 if (i < j) {
	   swap(A[i], A[j]); 
	 }
	}
     #+end_src
**** time taken: at most O(n)
*** Merging
**** combine 2 single sorted list
**** Append
**** Concat
**** Compare
**** Copy
**** 
     #+begin_src C
       i = 0;
       j = 0;
       k = 0;

       while (i < m && j < n) {
  
	 if (A[i] < B[j]) {
	   C[k] = A[i];
	   i++;
	   k++;
	 }
	 else {
	   C[k] = B[j];
	   k++;
	   j++;
	 }
	}

       /* copy remaning element */

       for (; i < m ; i++) {
	 C[k++] = A[i];
	}

       for (; j < n ; j++) {
	 C[k+1] = B[j];
	}
     #+end_src
**** Analysis: Theta(m + n) 
*** Union
**** UNSORTED
***** A(m) and B(n) array
***** Copy to C (if unique)
***** m is time for searching
***** total time: m + (m*n) = n + (n*n) = O(n^2)
**** SORTED
***** total time O(m+n) = O(n+n) = O(2n) = O(n)
*** Intersection
**** Total time O(n^2) unsorted
**** Total time O(n)
*** Difference
**** Total time O(n^2) unsorted
**** Total time O(n)
*** Set membership
**** If element belongs to a set or not

** Demo: `file:arrayADT.c`
